[{"/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/index.js":"1","/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/App.js":"2","/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/reportWebVitals.js":"3","/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/CostForm.js":"4","/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/Report.js":"5","/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/ReportView.js":"6"},{"size":536,"mtime":1672319187020,"results":"7","hashOfConfig":"8"},{"size":1907,"mtime":1673170890379,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1672314099574,"results":"10","hashOfConfig":"8"},{"size":3968,"mtime":1673169769277,"results":"11","hashOfConfig":"8"},{"size":2479,"mtime":1672831171564,"results":"12","hashOfConfig":"8"},{"size":5561,"mtime":1673170717448,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1x9f7gc",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/index.js",[],[],[],"/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/App.js",[],[],"/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/reportWebVitals.js",[],[],"/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/CostForm.js",[],[],"/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/Report.js",[],[],"/Users/yoni/Desktop/Final Assignment - Front End/cost-manager-front/src/ReportView.js",["34","35","36","37","38","39","40","41","42","43","44","45"],[],"import React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Pie } from 'react-chartjs-2';\nimport './ReportView.css';\n\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nfunction ReportView(props) {\n  const { year, month } = props;\n  const [costs, setCosts] = useState([]);\n  const [flag, setFlag] = useState(false);\n  const [popUp, setPopUp] = useState(false);\n\n  useEffect(() => {\n    // retrieve the data from local storage \n    const data = localStorage.getItem('costs');\n    if (data) {\n      // set it to the state only with same year and month\n      const costs = JSON.parse(data).filter(cost => cost.year == year && cost.month == month);\n      if (costs.length > 0) {\n        setFlag(true);\n      }\n      // calculate the total sum for each category\n      const food = costs.filter(cost => cost.category == 'food').reduce((sum, cost) => sum + cost.sum, 0);\n      const health = costs.filter(cost => cost.category == 'health').reduce((sum, cost) => sum + cost.sum, 0);\n      const housing = costs.filter(cost => cost.category == 'housing').reduce((sum, cost) => sum + cost.sum, 0);\n      const sport = costs.filter(cost => cost.category == 'sport').reduce((sum, cost) => sum + cost.sum, 0);\n      const education = costs.filter(cost => cost.category == 'education').reduce((sum, cost) => sum + cost.sum, 0);\n      const transportation = costs.filter(cost => cost.category == 'transportation').reduce((sum, cost) => sum + cost.sum, 0);\n      const other = costs.filter(cost => cost.category == 'other').reduce((sum, cost) => sum + cost.sum, 0);\n\n      setCosts([food, health, housing, sport, education, transportation, other].map(cost => parseFloat(cost)));\n    } else {\n      // if no data, set the state to an empty array\n      setCosts([]);\n      setFlag(false);\n    }\n  }, []);\n\n  function mapMonth(month) {\n\n    // map month to the month name based on the month number\n    let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return months[month-1];\n  }\n\n  const data = {\n    labels: ['Food', 'Health', 'Housing', 'Sport', 'Education', 'Transportation', 'Other'],\n    datasets: [\n      {\n        data: costs,\n        backgroundColor: [\n          '#FF9E9E',\n          '#96C5F5',\n          '#FFFF92',\n          '#96F5F5',\n          '#F57C7C',\n          '#81C784',\n          '#9E96FF'\n        ],\n        hoverBackgroundColor: [\n          '#FF6384',\n          '#36A2EB',\n          '#FFCE56',\n          '#00b8d4',\n          '#e53935',\n          '#43A047',\n          '#6200EE',\n        ],\n      },\n    ],\n  };\n\n\n  function showCosts() {\n    // retrieve the data from local storage\n    const data = localStorage.getItem('costs');\n\n    if (data) {\n      // set it to the state only with same year and month\n      let costs = JSON.parse(data).filter(cost => cost.year == year && cost.month == month);\n\n      // sort the costs by day \n      costs = costs.sort((a, b) => a.day - b.day);\n\n      if (costs.length > 0) {\n        return costs.map(cost => <tr className='cost'>\n          <td>{cost.day}.{cost.month}.{cost.year}</td>\n          <td>{cost.category}</td>\n          <td>{cost.description}</td>\n          <td>{cost.sum}</td>\n        </tr>)\n      }}\n  }\n\n  return (\n    <div className='viewCont animate__animated animate__fadeIn'>\n      <p>Showing Report for {mapMonth(parseInt(month))}, {year}</p>\n      {!flag && <div>No costs in {mapMonth(parseInt(month))}, {year}</div>}\n      {flag && <div>\n        <Pie data={data}\n          options={{\n            plugins: {\n              legend: {\n                position: 'bottom',\n              },\n              title: {\n                display: true,\n                text: 'Costs by Category',\n              },\n            },\n          }}\n        />\n        <table>\n          <thead>\n            <tr>\n              <th>Category</th>\n              <th>Sum</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Food</td>\n              <td>{costs[0]}</td>\n            </tr>\n            <tr>\n              <td>Health</td>\n              <td>{costs[1]}</td>\n            </tr>\n            <tr>\n              <td>Housing</td>\n              <td>{costs[2]}</td>\n            </tr>\n            <tr>\n              <td>Sport</td>\n              <td>{costs[3]}</td>\n            </tr>\n            <tr>\n              <td>Education</td>\n              <td>{costs[4]}</td>\n            </tr>\n            <tr>\n              <td>Transportation</td>\n              <td>{costs[5]}</td>\n            </tr>\n            <tr>\n              <td>Other</td>\n              <td>{costs[6]}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <button className='btn-full-costs button-39' onClick={setPopUp}>View full costs of {mapMonth(parseInt(month))}, {year}</button>\n        {popUp && <div className='popUp animate__animated animate__fadeIn'>\n          \n          <h4>Showing full costs of {mapMonth(parseInt(month))}</h4>\n      <label>Sorted by date</label>\n\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Category</th>\n                <th>Description</th>\n                <th>Sum</th>\n              </tr>\n            </thead>\n            <tbody>\n          {showCosts()}\n            </tbody>\n          </table>\n        <button className='closePopup' onClick={() => setPopUp(false)}>x</button>\n        </div>}\n      </div>}\n    </div>\n  );\n}\n\nexport default ReportView;",{"ruleId":"46","severity":1,"message":"47","line":20,"column":63,"nodeType":"48","messageId":"49","endLine":20,"endColumn":65},{"ruleId":"46","severity":1,"message":"47","line":20,"column":85,"nodeType":"48","messageId":"49","endLine":20,"endColumn":87},{"ruleId":"46","severity":1,"message":"47","line":25,"column":55,"nodeType":"48","messageId":"49","endLine":25,"endColumn":57},{"ruleId":"46","severity":1,"message":"47","line":26,"column":57,"nodeType":"48","messageId":"49","endLine":26,"endColumn":59},{"ruleId":"46","severity":1,"message":"47","line":27,"column":58,"nodeType":"48","messageId":"49","endLine":27,"endColumn":60},{"ruleId":"46","severity":1,"message":"47","line":28,"column":56,"nodeType":"48","messageId":"49","endLine":28,"endColumn":58},{"ruleId":"46","severity":1,"message":"47","line":29,"column":60,"nodeType":"48","messageId":"49","endLine":29,"endColumn":62},{"ruleId":"46","severity":1,"message":"47","line":30,"column":65,"nodeType":"48","messageId":"49","endLine":30,"endColumn":67},{"ruleId":"46","severity":1,"message":"47","line":31,"column":56,"nodeType":"48","messageId":"49","endLine":31,"endColumn":58},{"ruleId":"50","severity":1,"message":"51","line":39,"column":6,"nodeType":"52","endLine":39,"endColumn":8,"suggestions":"53"},{"ruleId":"46","severity":1,"message":"47","line":82,"column":61,"nodeType":"48","messageId":"49","endLine":82,"endColumn":63},{"ruleId":"46","severity":1,"message":"47","line":82,"column":83,"nodeType":"48","messageId":"49","endLine":82,"endColumn":85},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'month' and 'year'. Either include them or remove the dependency array.","ArrayExpression",["54"],{"desc":"55","fix":"56"},"Update the dependencies array to be: [month, year]",{"range":"57","text":"58"},[1855,1857],"[month, year]"]